/** @file
	@brief Implementation GENERATED BY generate-operators.lua - Do not edit by hand!

	@date 2013

	@author
	Ryan Pavlik
	<rpavlik@iastate.edu> and <abiryan@ryand.net>
	http://academic.cleardefinition.com/
	Iowa State University Virtual Reality Applications Center
	Human-Computer Interaction Graduate Program
	
*/

//           Copyright Iowa State University 2013.
//  Distributed under the Boost Software License, Version 1.0.
//     (See accompanying file LICENSE_1_0.txt or copy at
//           http://www.boost.org/LICENSE_1_0.txt)


// Internal Includes
#include "RegisterMathMetamethods.h"

#include "LuaIncludeFull.h"

// Library/third-party includes
#include <osgLua/introspection/ExtendedTypeInfo>
#include <osgLua/introspection/Value>
#include <osgLua/introspection/Type>
#include <osgLua/introspection/variant_cast>

#include <osg/Vec2b>
#include <osg/Vec2d>
#include <osg/Vec2f>
#include <osg/Vec2s>
#include <osg/Vec3b>
#include <osg/Vec3d>
#include <osg/Vec3f>
#include <osg/Vec3s>
#include <osg/Vec4b>
#include <osg/Vec4d>
#include <osg/Vec4f>
#include <osg/Vec4s>
#include <osg/Vec4ub>
#include <osg/Matrixd>
#include <osg/Matrixf>
#include <osg/Quat>

// Standard includes
// - none


namespace osgLua {
  // Anonymous namespace for tag types
  namespace {
    struct add;
    struct sub;
    struct div;
    struct mul;
    struct pow;
  } // end of namespace

  template<typename Operator, typename T>
  struct AttemptOperator;

  template<>
  struct AttemptOperator<add, osg::Vec2b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec2b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec2b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec2b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec2d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec2d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec2d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec2d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec2f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec2f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec2f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec2f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec2s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec2s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec2s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec2s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec3b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec3b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec3b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec3b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<pow, osg::Vec3b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not pow: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not pow instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec3d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec3d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec3d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec3d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<pow, osg::Vec3d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not pow: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not pow instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec3f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec3f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec3f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec3f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<pow, osg::Vec3f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not pow: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not pow instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec3s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec3s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec3s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec3s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<pow, osg::Vec3s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not pow: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a ^ b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = b ^ a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not pow instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec4b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec4b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec4b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec4b> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec4d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec4d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec4d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec4d> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec4f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec4f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec4f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec4f> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec4s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec4s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec4s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec4s> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<add, osg::Vec4ub> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not add: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a + b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b + a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not add instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<sub, osg::Vec4ub> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not sub: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a - b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b - a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not sub instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Vec4ub> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Vec4ub> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
        if (osgLuaValueUsableAs<osg::double>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::double b = introspection::variant_cast<osg::double>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::float b = introspection::variant_cast<osg::float>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec2b b = introspection::variant_cast<osg::Vec2b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec2d b = introspection::variant_cast<osg::Vec2d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec2f b = introspection::variant_cast<osg::Vec2f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec2s b = introspection::variant_cast<osg::Vec2s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
        if (osgLuaValueUsableAs<osg::double>(L, -2)) {
          osg::double a = introspection::variant_cast<osg::double>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::float>(L, -2)) {
          osg::float a = introspection::variant_cast<osg::float>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2b>(L, -2)) {
          osg::Vec2b a = introspection::variant_cast<osg::Vec2b>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2d>(L, -2)) {
          osg::Vec2d a = introspection::variant_cast<osg::Vec2d>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2f>(L, -2)) {
          osg::Vec2f a = introspection::variant_cast<osg::Vec2f>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec2s>(L, -2)) {
          osg::Vec2s a = introspection::variant_cast<osg::Vec2s>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Matrixd> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Matrixf> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -1)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Matrixd b = introspection::variant_cast<osg::Matrixd>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Matrixf>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixd>(L, -2)) {
          osg::Matrixd a = introspection::variant_cast<osg::Matrixd>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Matrixf>(L, -2)) {
          osg::Matrixf a = introspection::variant_cast<osg::Matrixf>(getValue(L, -2));
          osg::Matrixf b = introspection::variant_cast<osg::Matrixf>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<div, osg::Quat> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not div: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = a / b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = b / a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not div instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };

  template<>
  struct AttemptOperator<mul, osg::Quat> {
    static int attempt(lua_State * L) {
      if (lua_isnil(L, -2) || lua_isnil(L, -1)) {
        return luaL_error(L, "[%s:%d] Could not mul: %s operand is nil", __FILE__, __LINE__, (lua_isnil(L, -2) ? "first" : "second"));
      }
      if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -1)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec3b b = introspection::variant_cast<osg::Vec3b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -1)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec3d b = introspection::variant_cast<osg::Vec3d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -1)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec3f b = introspection::variant_cast<osg::Vec3f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -1)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec3s b = introspection::variant_cast<osg::Vec3s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -1)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec4b b = introspection::variant_cast<osg::Vec4b>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -1)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec4d b = introspection::variant_cast<osg::Vec4d>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -1)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec4f b = introspection::variant_cast<osg::Vec4f>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -1)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec4s b = introspection::variant_cast<osg::Vec4s>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -1)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Vec4ub b = introspection::variant_cast<osg::Vec4ub>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = a * b;
          Value::push(L, r);
          return 1;

        }
      }
      if (osgLuaValueUsableAs<osg::Quat>(L, -1)) {
        if (osgLuaValueUsableAs<osg::Vec3b>(L, -2)) {
          osg::Vec3b a = introspection::variant_cast<osg::Vec3b>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3d>(L, -2)) {
          osg::Vec3d a = introspection::variant_cast<osg::Vec3d>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3f>(L, -2)) {
          osg::Vec3f a = introspection::variant_cast<osg::Vec3f>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec3s>(L, -2)) {
          osg::Vec3s a = introspection::variant_cast<osg::Vec3s>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4b>(L, -2)) {
          osg::Vec4b a = introspection::variant_cast<osg::Vec4b>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4d>(L, -2)) {
          osg::Vec4d a = introspection::variant_cast<osg::Vec4d>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4f>(L, -2)) {
          osg::Vec4f a = introspection::variant_cast<osg::Vec4f>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4s>(L, -2)) {
          osg::Vec4s a = introspection::variant_cast<osg::Vec4s>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Vec4ub>(L, -2)) {
          osg::Vec4ub a = introspection::variant_cast<osg::Vec4ub>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
        if (osgLuaValueUsableAs<osg::Quat>(L, -2)) {
          osg::Quat a = introspection::variant_cast<osg::Quat>(getValue(L, -2));
          osg::Quat b = introspection::variant_cast<osg::Quat>(getValue(L, -1));
          introspection::Value r = b * a;
          Value::push(L, r);
          return 1;

        }
      }
      
      return luaL_error(L, "[%s:%d] Could not mul instances of %s, %s", __FILE__, __LINE__,
        getValue(L, -2).getType().getQualifiedName().c_str(), getValue(L, -1).getType().getQualifiedName().c_str());
    }
  };


  void registerMathMetamethods(lua_State * L, introspection::Type const& t) {
    if (introspection::Reflection::getType(extended_typeid<osg::Vec2b>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec2b>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec2b>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec2b>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec2b>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec2d>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec2d>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec2d>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec2d>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec2d>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec2f>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec2f>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec2f>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec2f>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec2f>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec2s>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec2s>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec2s>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec2s>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec2s>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec3b>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec3b>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec3b>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec3b>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec3b>::attempt));
      lua_setfield(L, -2, "__mul");
      lua_pushcfunction(L, &(AttemptOperator<pow, osg::Vec3b>::attempt));
      lua_setfield(L, -2, "__pow");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec3d>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec3d>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec3d>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec3d>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec3d>::attempt));
      lua_setfield(L, -2, "__mul");
      lua_pushcfunction(L, &(AttemptOperator<pow, osg::Vec3d>::attempt));
      lua_setfield(L, -2, "__pow");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec3f>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec3f>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec3f>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec3f>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec3f>::attempt));
      lua_setfield(L, -2, "__mul");
      lua_pushcfunction(L, &(AttemptOperator<pow, osg::Vec3f>::attempt));
      lua_setfield(L, -2, "__pow");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec3s>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec3s>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec3s>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec3s>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec3s>::attempt));
      lua_setfield(L, -2, "__mul");
      lua_pushcfunction(L, &(AttemptOperator<pow, osg::Vec3s>::attempt));
      lua_setfield(L, -2, "__pow");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec4b>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec4b>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec4b>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec4b>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec4b>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec4d>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec4d>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec4d>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec4d>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec4d>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec4f>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec4f>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec4f>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec4f>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec4f>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec4s>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec4s>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec4s>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec4s>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec4s>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Vec4ub>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<add, osg::Vec4ub>::attempt));
      lua_setfield(L, -2, "__add");
      lua_pushcfunction(L, &(AttemptOperator<sub, osg::Vec4ub>::attempt));
      lua_setfield(L, -2, "__sub");
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Vec4ub>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Vec4ub>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Matrixd>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Matrixd>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Matrixf>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Matrixf>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
    if (introspection::Reflection::getType(extended_typeid<osg::Quat>) == t)) {
      lua_pushcfunction(L, &(AttemptOperator<div, osg::Quat>::attempt));
      lua_setfield(L, -2, "__div");
      lua_pushcfunction(L, &(AttemptOperator<mul, osg::Quat>::attempt));
      lua_setfield(L, -2, "__mul");
      return;
    }
  }
} // end of namespace osgLua


